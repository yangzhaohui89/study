<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
	
	<!-- 定义数据源Bean，使用C3P0数据源实现，并注入数据源的必要信息 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close"
		p:driverClass="com.mysql.jdbc.Driver"
		p:jdbcUrl="jdbc:mysql://localhost:3306/sakila"
		p:user="root"
		p:password="root"
		p:maxPoolSize="40"
		p:minPoolSize="2"
		p:initialPoolSize="2"
		p:maxIdleTime="30"/>
	<!-- 定义Hibernate的SessionFactory，SessionFactory需要依赖数据源，注入dataSource -->
	<bean id="sessionFactory" 
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
		p:dataSource-ref="dataSource">
		<!-- mappingResources用来列出全部映射文件 -->
		<!-- 依赖注入映射文件，扫描包-->
		<property name="packagesToScan">
			<list>
				<value>po</value>
			</list>
		</property>
		<!-- 定义Hibernate SessionFactory的属性 -->
		<property name="hibernateProperties">
			<props>
				<!-- 指定Hibernate的连接方言 -->
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQL5InnoDBDialect</prop>
				<!--是否根据Hiberante映射创建数据表 -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>	
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop> 			
			</props>
		</property>
	</bean>
	
	<!-- 定义触发器来管理任务Bean 
		cronExpression指定Cron表达式：周一到周五7点、12点执行调度-->
	<bean id="cronTriggerPunch" 
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"
		p:cronExpression="0 11 21 ? * MON-FRI">
		<property name="jobDetail">
			<!-- 使用嵌套Bean的方式来定义任务Bean
				jobClass指定任务Bean的实现类 -->
			<bean class="org.springframework.scheduling.quartz.JobDetailFactoryBean"
				p:jobClass="schedule.AddActor"
				p:durability="true">
				<!-- 为任务Bean注入属性 -->
				<property name="jobDataAsMap">
					<map>
						<entry key="actorservice" value-ref="actorservice"/>
					</map>
				</property>
			</bean>
		</property>
	</bean>
	<!-- 执行实际的调度调度 -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="cronTriggerPunch"/>
			</list>
		</property>
	</bean>
	
	<!-- 配置Hibernate的局部事务管理器，使用HibernateTransactionManager类 -->
	<!-- 该类是PlatformTransactionManager接口针对采用Hibernate的特定实现类 -->
	<!-- 配置HibernateTransactionManager需依赖注入SessionFactory -->
	<bean id="transactionManager" 
		class="org.springframework.orm.hibernate4.HibernateTransactionManager"
		p:sessionFactory-ref="sessionFactory"/>

<!-- 配置事务增强处理Bean,指定事务管理器 -->
<tx:advice id="txAdvice" transaction-manager="transactionManager">
	<!-- 用于配置详细的事务定义 -->
	<tx:attributes>
		<!-- 所有以'get'开头的方法是read-only的 -->
		<tx:method name="get*" read-only="true"/>
		<!-- 其他方法使用默认的事务设置，指定超时时长为5秒 -->
		<tx:method name="*" isolation="DEFAULT" propagation="REQUIRED" timeout="5"/>
	</tx:attributes>
</tx:advice>
<!-- AOP配置的元素 -->
<aop:config>
	<aop:pointcut id="appPointcut" expression="execution(* service.impl.*Impl.*(..))"/>
	<!-- 指定在myPointcut切入点应用txAdvice事务增强处理 -->
	<aop:advisor advice-ref="txAdvice" pointcut-ref="appPointcut"/>
</aop:config>

<context:component-scan base-package="service.impl,dao.impl,common.dao" />
</beans>
